/* 
* Generated by
* 
*      _____ _          __  __      _     _
*     / ____| |        / _|/ _|    | |   | |
*    | (___ | | ____ _| |_| |_ ___ | | __| | ___ _ __
*     \___ \| |/ / _` |  _|  _/ _ \| |/ _` |/ _ \ '__|
*     ____) |   < (_| | | | || (_) | | (_| |  __/ |
*    |_____/|_|\_\__,_|_| |_| \___/|_|\__,_|\___|_|
*
* The code generator that works in many programming languages
*
*			https://www.skaffolder.com
*
*
* You can generate the code from the command-line
*       https://npmjs.com/package/skaffolder-cli
*
*       npm install -g skaffodler-cli
*
*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *
*
* To remove this comment please upgrade your plan here: 
*      https://app.skaffolder.com/#!/upgrade
*
* Or get up to 70% discount sharing your unique link:
*       https://app.skaffolder.com/#!/register?friend=5e55338952a8e9561a0d078c
*
* You will get 10% discount for each one of your friends
* 
*/
package com.security.controller.base;

import org.springframework.security.access.annotation.Secured;
import java.util.ArrayList;
import java.util.List;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.security.db.security_db.service.SecurityService;
import com.security.db.security_db.mapper.Security;

public class SecurityBaseController {

	SecurityService securityService = new SecurityService();



//CRUD METHODS


    //CRUD - CREATE
    @Secured({"ROLE_PRIVATE_USER" })
	@RequestMapping(value = "/security", method = RequestMethod.POST, headers = "Accept=application/json")
	public Security insert(@RequestBody Security obj) {
		Security result = securityService.insert(obj);

	    
		//external relation Search
		ArrayList<Long> Search = obj.getSearch();
		if (Search != null) {
			SecurityService.Security_SearchService.updateRelation(result.get_id(), Search);
		}
		
		
		return result;
	}

	
    //CRUD - REMOVE
    @Secured({"ROLE_PRIVATE_USER" })
	@RequestMapping(value = "/security/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
	public void delete(@PathVariable("id") Long id) {
		securityService.delete(id);
	}
	

    //CRUD - FIND BY Security
    @Secured({"ROLE_PRIVATE_USER" })
	@RequestMapping(value = "/security/findBySecurity/{key}", method = RequestMethod.GET, headers = "Accept=application/json")
	public List<Security> findBySecurity(@PathVariable("key") Long idSecurity) {
		List<Security> list = securityService.findBySecurity(idSecurity);
		return list;
	}
	
	
    //CRUD - GET ONE
    @Secured({"ROLE_PRIVATE_USER" })
	@RequestMapping(value = "/security/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
	public Security get(@PathVariable Long id) {
		Security obj = securityService.get(id);
		
		
		//external relation Search
		ArrayList<Long> Search = SecurityService.Security_SearchService.findBy_Security(id);
		obj.setSearch(Search);
		
		
		return obj;
	}
	
	
    //CRUD - GET LIST
    @Secured({"ROLE_PRIVATE_USER" })
	@RequestMapping(value = "/security", method = RequestMethod.GET, headers = "Accept=application/json")
	public List<Security> getList() {
		List<Security> list = securityService.getList();
		return list;
	}
	
	

    //CRUD - EDIT
    @Secured({"ROLE_PRIVATE_USER" })
	@RequestMapping(value = "/security/{id}", method = RequestMethod.POST, headers = "Accept=application/json")
	public Security update(@RequestBody Security obj, @PathVariable("id") Long id) {
		Security result = securityService.update(obj, id);

	    
		//external relation Search
		ArrayList<Long> Search = obj.getSearch();
		if (Search != null) {
			SecurityService.Security_SearchService.updateRelation(id, Search);
		}
		
		
		return result;
	}
	


/*
 * CUSTOM SERVICES
 * 
 *	These services will be overwritten and implemented in  Custom.js
 */


	
}
